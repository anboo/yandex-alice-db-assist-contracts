// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proxy_service.proto

package yandex_alice_db_assist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyDatabaseClient is the client API for ProxyDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyDatabaseClient interface {
	StartAuthorization(ctx context.Context, in *StartAuthorizationRequest, opts ...grpc.CallOption) (*StartAuthorizationResponse, error)
	ConfirmAuthorization(ctx context.Context, in *ConfirmAuthorizationRequest, opts ...grpc.CallOption) (*ConfirmAuthorizationResponse, error)
	RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error)
}

type proxyDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyDatabaseClient(cc grpc.ClientConnInterface) ProxyDatabaseClient {
	return &proxyDatabaseClient{cc}
}

func (c *proxyDatabaseClient) StartAuthorization(ctx context.Context, in *StartAuthorizationRequest, opts ...grpc.CallOption) (*StartAuthorizationResponse, error) {
	out := new(StartAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/yandex_alice.db_assist.ProxyDatabase/StartAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyDatabaseClient) ConfirmAuthorization(ctx context.Context, in *ConfirmAuthorizationRequest, opts ...grpc.CallOption) (*ConfirmAuthorizationResponse, error) {
	out := new(ConfirmAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/yandex_alice.db_assist.ProxyDatabase/ConfirmAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyDatabaseClient) RunQuery(ctx context.Context, in *RunQueryRequest, opts ...grpc.CallOption) (*RunQueryResponse, error) {
	out := new(RunQueryResponse)
	err := c.cc.Invoke(ctx, "/yandex_alice.db_assist.ProxyDatabase/RunQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyDatabaseServer is the server API for ProxyDatabase service.
// All implementations must embed UnimplementedProxyDatabaseServer
// for forward compatibility
type ProxyDatabaseServer interface {
	StartAuthorization(context.Context, *StartAuthorizationRequest) (*StartAuthorizationResponse, error)
	ConfirmAuthorization(context.Context, *ConfirmAuthorizationRequest) (*ConfirmAuthorizationResponse, error)
	RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error)
	mustEmbedUnimplementedProxyDatabaseServer()
}

// UnimplementedProxyDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedProxyDatabaseServer struct {
}

func (UnimplementedProxyDatabaseServer) StartAuthorization(context.Context, *StartAuthorizationRequest) (*StartAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAuthorization not implemented")
}
func (UnimplementedProxyDatabaseServer) ConfirmAuthorization(context.Context, *ConfirmAuthorizationRequest) (*ConfirmAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAuthorization not implemented")
}
func (UnimplementedProxyDatabaseServer) RunQuery(context.Context, *RunQueryRequest) (*RunQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}
func (UnimplementedProxyDatabaseServer) mustEmbedUnimplementedProxyDatabaseServer() {}

// UnsafeProxyDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyDatabaseServer will
// result in compilation errors.
type UnsafeProxyDatabaseServer interface {
	mustEmbedUnimplementedProxyDatabaseServer()
}

func RegisterProxyDatabaseServer(s grpc.ServiceRegistrar, srv ProxyDatabaseServer) {
	s.RegisterService(&ProxyDatabase_ServiceDesc, srv)
}

func _ProxyDatabase_StartAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyDatabaseServer).StartAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex_alice.db_assist.ProxyDatabase/StartAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyDatabaseServer).StartAuthorization(ctx, req.(*StartAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyDatabase_ConfirmAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyDatabaseServer).ConfirmAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex_alice.db_assist.ProxyDatabase/ConfirmAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyDatabaseServer).ConfirmAuthorization(ctx, req.(*ConfirmAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyDatabase_RunQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyDatabaseServer).RunQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yandex_alice.db_assist.ProxyDatabase/RunQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyDatabaseServer).RunQuery(ctx, req.(*RunQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyDatabase_ServiceDesc is the grpc.ServiceDesc for ProxyDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex_alice.db_assist.ProxyDatabase",
	HandlerType: (*ProxyDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartAuthorization",
			Handler:    _ProxyDatabase_StartAuthorization_Handler,
		},
		{
			MethodName: "ConfirmAuthorization",
			Handler:    _ProxyDatabase_ConfirmAuthorization_Handler,
		},
		{
			MethodName: "RunQuery",
			Handler:    _ProxyDatabase_RunQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy_service.proto",
}
